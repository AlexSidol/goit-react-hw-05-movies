{"version":3,"file":"static/js/76.003dc0b9.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/apiMDB.jsx","services/useHooks.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast__list\":\"Cast_cast__list__yNezN\",\"cast__name\":\"Cast_cast__name__i+AX1\"};","import { useParams } from 'react-router-dom';\nimport { useMovieCredits } from '../../services/useHooks';\nimport css from '../Cast/Cast.module.css';\nimport PropTypes from 'prop-types';\nimport { getImg } from '../../services/apiMDB';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { movieCredits } = useMovieCredits(movieId);\n\n  return (\n    <div>\n      <ul className={css.cast__list}>\n        {movieCredits.map(({ profile_path, id, name, character }) => {\n          return (\n            <li key={id}>\n              <img width={100} src={getImg(profile_path)} alt={name} />\n              <p className={css.cast__name}>{name}</p>\n              <p className={css.cast__name}>Character: {character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=fd58d78770f5e002deebabf4164f4fc6';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day${API_KEY}`);\n  return response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast.map(({ name, character, profile_path, id }) => {\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ author, content, id }) => {\n    return {\n      author,\n      content,\n      id,\n    };\n  });\n};\n\nexport const getImg = src => {\n  return src\n    ? `https://image.tmdb.org/t/p/w500${src}`\n    : `https://upload.wikimedia.org/wikipedia/commons/c/c2/No_image_poster.png`;\n};\n","import * as API from '../services/apiMDB';\nimport { useState, useEffect } from 'react';\n\nexport const useTrendingList = () => {\n  const [trendingMovies, setMovies] = useState([]);\n\n  useEffect(() => {\n    API.getTrending().then(ret => setMovies(ret));\n  }, []);\n\n  return { trendingMovies };\n};\n\nexport const useMovieDetails = movieId => {\n  const [movieDetails, setMovieDetails] = useState(null);\n\n  useEffect(() => {\n    API.getMovieDetails(movieId).then(ret => setMovieDetails(ret));\n  }, [movieId]);\n\n  return { movieDetails };\n};\n\nexport const useMovieCredits = movieId => {\n  const [movieCredits, setMovieCredits] = useState([]);\n\n  useEffect(() => {\n    API.getMovieCredits(movieId).then(ret => setMovieCredits(ret));\n  }, [movieId]);\n  return { movieCredits };\n};\n\nexport const useMovieReviews = movieId => {\n  const [movieReviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    API.getMoviesReviews(movieId).then(ret => setReviews(ret));\n  }, [movieId]);\n  return { movieReviews };\n};\n\nexport const useSearchMovies = input => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    API.searchMovies(input).then(ret => setMovies(ret));\n  }, [input]);\n  return { movies };\n};\n"],"names":["movieId","useParams","movieCredits","useMovieCredits","className","css","map","profile_path","id","name","character","width","src","getImg","alt","axios","API_KEY","getTrending","response","data","results","title","poster_path","searchMovies","inputValue","getMovieDetails","getMovieCredits","moviesId","cast","getMoviesReviews","author","content","useTrendingList","useState","trendingMovies","setMovies","useEffect","API","then","ret","useMovieDetails","movieDetails","setMovieDetails","setMovieCredits","useMovieReviews","movieReviews","setReviews"],"sourceRoot":""}